/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client.model;

import io.swagger.client.model.GeoPointResource;

import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;


@ApiModel(description = "")
public class LocationResource  {
  
  @SerializedName("city")
  private String city = null;
  public enum CountryCodeEnum {
     UNDEFINED,  AC,  AD,  AE,  AF,  AG,  AI,  AL,  AM,  AN,  AO,  AQ,  AR,  AS,  AT,  AU,  AW,  AX,  AZ,  BA,  BB,  BD,  BE,  BF,  BG,  BH,  BI,  BJ,  BL,  BM,  BN,  BO,  BQ,  BR,  BS,  BT,  BU,  BV,  BW,  BY,  BZ,  CA,  CC,  CD,  CF,  CG,  CH,  CI,  CK,  CL,  CM,  CN,  CO,  CP,  CR,  CS,  CU,  CV,  CW,  CX,  CY,  CZ,  DE,  DG,  DJ,  DK,  DM,  DO,  DZ,  EA,  EC,  EE,  EG,  EH,  ER,  ES,  ET,  EU,  EZ,  FI,  FJ,  FK,  FM,  FO,  FR,  FX,  GA,  GB,  GD,  GE,  GF,  GG,  GH,  GI,  GL,  GM,  GN,  GP,  GQ,  GR,  GS,  GT,  GU,  GW,  GY,  HK,  HM,  HN,  HR,  HT,  HU,  IC,  ID,  IE,  IL,  IM,  IN,  IO,  IQ,  IR,  IS,  IT,  JE,  JM,  JO,  JP,  KE,  KG,  KH,  KI,  KM,  KN,  KP,  KR,  KW,  KY,  KZ,  LA,  LB,  LC,  LI,  LK,  LR,  LS,  LT,  LU,  LV,  LY,  MA,  MC,  MD,  ME,  MF,  MG,  MH,  MK,  ML,  MM,  MN,  MO,  MP,  MQ,  MR,  MS,  MT,  MU,  MV,  MW,  MX,  MY,  MZ,  NA,  NC,  NE,  NF,  NG,  NI,  NL,  NO,  NP,  NR,  NT,  NU,  NZ,  OM,  PA,  PE,  PF,  PG,  PH,  PK,  PL,  PM,  PN,  PR,  PS,  PT,  PW,  PY,  QA,  RE,  RO,  RS,  RU,  RW,  SA,  SB,  SC,  SD,  SE,  SF,  SG,  SH,  SI,  SJ,  SK,  SL,  SM,  SN,  SO,  SR,  SS,  ST,  SU,  SV,  SX,  SY,  SZ,  TA,  TC,  TD,  TF,  TG,  TH,  TJ,  TK,  TL,  TM,  TN,  TO,  TP,  TR,  TT,  TV,  TW,  TZ,  UA,  UG,  UK,  UM,  US,  UY,  UZ,  VA,  VC,  VE,  VG,  VI,  VN,  VU,  WF,  WS,  XK,  YE,  YT,  YU,  ZA,  ZM,  ZR,  ZW, 
  };
  @SerializedName("countryCode")
  private CountryCodeEnum countryCode = null;
  @SerializedName("location")
  private GeoPointResource location = null;
  @SerializedName("locationGeoHash")
  private String locationGeoHash = null;
  @SerializedName("street")
  private String street = null;
  @SerializedName("streetNo")
  private String streetNo = null;
  @SerializedName("zipCode")
  private String zipCode = null;

  /**
   **/
  @ApiModelProperty(required = true, value = "")
  public String getCity() {
    return city;
  }
  public void setCity(String city) {
    this.city = city;
  }

  /**
   **/
  @ApiModelProperty(required = true, value = "")
  public CountryCodeEnum getCountryCode() {
    return countryCode;
  }
  public void setCountryCode(CountryCodeEnum countryCode) {
    this.countryCode = countryCode;
  }

  /**
   **/
  @ApiModelProperty(required = true, value = "")
  public GeoPointResource getLocation() {
    return location;
  }
  public void setLocation(GeoPointResource location) {
    this.location = location;
  }

  /**
   **/
  @ApiModelProperty(required = true, value = "")
  public String getLocationGeoHash() {
    return locationGeoHash;
  }
  public void setLocationGeoHash(String locationGeoHash) {
    this.locationGeoHash = locationGeoHash;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getStreet() {
    return street;
  }
  public void setStreet(String street) {
    this.street = street;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getStreetNo() {
    return streetNo;
  }
  public void setStreetNo(String streetNo) {
    this.streetNo = streetNo;
  }

  /**
   **/
  @ApiModelProperty(required = true, value = "")
  public String getZipCode() {
    return zipCode;
  }
  public void setZipCode(String zipCode) {
    this.zipCode = zipCode;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LocationResource locationResource = (LocationResource) o;
    return (city == null ? locationResource.city == null : city.equals(locationResource.city)) &&
        (countryCode == null ? locationResource.countryCode == null : countryCode.equals(locationResource.countryCode)) &&
        (location == null ? locationResource.location == null : location.equals(locationResource.location)) &&
        (locationGeoHash == null ? locationResource.locationGeoHash == null : locationGeoHash.equals(locationResource.locationGeoHash)) &&
        (street == null ? locationResource.street == null : street.equals(locationResource.street)) &&
        (streetNo == null ? locationResource.streetNo == null : streetNo.equals(locationResource.streetNo)) &&
        (zipCode == null ? locationResource.zipCode == null : zipCode.equals(locationResource.zipCode));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (city == null ? 0: city.hashCode());
    result = 31 * result + (countryCode == null ? 0: countryCode.hashCode());
    result = 31 * result + (location == null ? 0: location.hashCode());
    result = 31 * result + (locationGeoHash == null ? 0: locationGeoHash.hashCode());
    result = 31 * result + (street == null ? 0: street.hashCode());
    result = 31 * result + (streetNo == null ? 0: streetNo.hashCode());
    result = 31 * result + (zipCode == null ? 0: zipCode.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class LocationResource {\n");
    
    sb.append("  city: ").append(city).append("\n");
    sb.append("  countryCode: ").append(countryCode).append("\n");
    sb.append("  location: ").append(location).append("\n");
    sb.append("  locationGeoHash: ").append(locationGeoHash).append("\n");
    sb.append("  street: ").append(street).append("\n");
    sb.append("  streetNo: ").append(streetNo).append("\n");
    sb.append("  zipCode: ").append(zipCode).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
