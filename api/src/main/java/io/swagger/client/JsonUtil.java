/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.List;
import io.swagger.client.model.*;

public class JsonUtil {
  public static GsonBuilder gsonBuilder;

  static {
    gsonBuilder = new GsonBuilder();
    gsonBuilder.serializeNulls();
    gsonBuilder.setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
  }

  public static Gson getGson() {
    return gsonBuilder.create();
  }

  public static String serialize(Object obj){
    return getGson().toJson(obj);
  }

  public static <T> T deserializeToList(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getListTypeForDeserialization(cls));
  }

  public static <T> T deserializeToObject(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getTypeForDeserialization(cls));
  }

  public static Type getListTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("AnonymizedUserResource".equalsIgnoreCase(className)) {
      return new TypeToken<List<AnonymizedUserResource>>(){}.getType();
    }
    
    if ("CreateOrderDto".equalsIgnoreCase(className)) {
      return new TypeToken<List<CreateOrderDto>>(){}.getType();
    }
    
    if ("CreateOrderItemDto".equalsIgnoreCase(className)) {
      return new TypeToken<List<CreateOrderItemDto>>(){}.getType();
    }
    
    if ("CreateUserDto".equalsIgnoreCase(className)) {
      return new TypeToken<List<CreateUserDto>>(){}.getType();
    }
    
    if ("FluxUserOrderAcceptedResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<FluxUserOrderAcceptedResponse>>(){}.getType();
    }
    
    if ("FluxUserOrderResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<FluxUserOrderResponse>>(){}.getType();
    }
    
    if ("FluxUserOrderSearchResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<FluxUserOrderSearchResponse>>(){}.getType();
    }
    
    if ("GeoPointResource".equalsIgnoreCase(className)) {
      return new TypeToken<List<GeoPointResource>>(){}.getType();
    }
    
    if ("GeoPointResource1".equalsIgnoreCase(className)) {
      return new TypeToken<List<GeoPointResource1>>(){}.getType();
    }
    
    if ("LocationResource".equalsIgnoreCase(className)) {
      return new TypeToken<List<LocationResource>>(){}.getType();
    }
    
    if ("MonoLocationResource".equalsIgnoreCase(className)) {
      return new TypeToken<List<MonoLocationResource>>(){}.getType();
    }
    
    if ("MonoOrderResource".equalsIgnoreCase(className)) {
      return new TypeToken<List<MonoOrderResource>>(){}.getType();
    }
    
    if ("MonoUserResource".equalsIgnoreCase(className)) {
      return new TypeToken<List<MonoUserResource>>(){}.getType();
    }
    
    if ("OrderItemResource".equalsIgnoreCase(className)) {
      return new TypeToken<List<OrderItemResource>>(){}.getType();
    }
    
    if ("OrderResource".equalsIgnoreCase(className)) {
      return new TypeToken<List<OrderResource>>(){}.getType();
    }
    
    if ("PatchUserAdminDto".equalsIgnoreCase(className)) {
      return new TypeToken<List<PatchUserAdminDto>>(){}.getType();
    }
    
    if ("UpdateUserDto".equalsIgnoreCase(className)) {
      return new TypeToken<List<UpdateUserDto>>(){}.getType();
    }
    
    if ("UserOrderAcceptedResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<UserOrderAcceptedResponse>>(){}.getType();
    }
    
    if ("UserOrderResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<UserOrderResponse>>(){}.getType();
    }
    
    if ("UserOrderSearchResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<UserOrderSearchResponse>>(){}.getType();
    }
    
    if ("UserResource".equalsIgnoreCase(className)) {
      return new TypeToken<List<UserResource>>(){}.getType();
    }
    
    return new TypeToken<List<Object>>(){}.getType();
  }

  public static Type getTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("AnonymizedUserResource".equalsIgnoreCase(className)) {
      return new TypeToken<AnonymizedUserResource>(){}.getType();
    }
    
    if ("CreateOrderDto".equalsIgnoreCase(className)) {
      return new TypeToken<CreateOrderDto>(){}.getType();
    }
    
    if ("CreateOrderItemDto".equalsIgnoreCase(className)) {
      return new TypeToken<CreateOrderItemDto>(){}.getType();
    }
    
    if ("CreateUserDto".equalsIgnoreCase(className)) {
      return new TypeToken<CreateUserDto>(){}.getType();
    }
    
    if ("FluxUserOrderAcceptedResponse".equalsIgnoreCase(className)) {
      return new TypeToken<FluxUserOrderAcceptedResponse>(){}.getType();
    }
    
    if ("FluxUserOrderResponse".equalsIgnoreCase(className)) {
      return new TypeToken<FluxUserOrderResponse>(){}.getType();
    }
    
    if ("FluxUserOrderSearchResponse".equalsIgnoreCase(className)) {
      return new TypeToken<FluxUserOrderSearchResponse>(){}.getType();
    }
    
    if ("GeoPointResource".equalsIgnoreCase(className)) {
      return new TypeToken<GeoPointResource>(){}.getType();
    }
    
    if ("GeoPointResource1".equalsIgnoreCase(className)) {
      return new TypeToken<GeoPointResource1>(){}.getType();
    }
    
    if ("LocationResource".equalsIgnoreCase(className)) {
      return new TypeToken<LocationResource>(){}.getType();
    }
    
    if ("MonoLocationResource".equalsIgnoreCase(className)) {
      return new TypeToken<MonoLocationResource>(){}.getType();
    }
    
    if ("MonoOrderResource".equalsIgnoreCase(className)) {
      return new TypeToken<MonoOrderResource>(){}.getType();
    }
    
    if ("MonoUserResource".equalsIgnoreCase(className)) {
      return new TypeToken<MonoUserResource>(){}.getType();
    }
    
    if ("OrderItemResource".equalsIgnoreCase(className)) {
      return new TypeToken<OrderItemResource>(){}.getType();
    }
    
    if ("OrderResource".equalsIgnoreCase(className)) {
      return new TypeToken<OrderResource>(){}.getType();
    }
    
    if ("PatchUserAdminDto".equalsIgnoreCase(className)) {
      return new TypeToken<PatchUserAdminDto>(){}.getType();
    }
    
    if ("UpdateUserDto".equalsIgnoreCase(className)) {
      return new TypeToken<UpdateUserDto>(){}.getType();
    }
    
    if ("UserOrderAcceptedResponse".equalsIgnoreCase(className)) {
      return new TypeToken<UserOrderAcceptedResponse>(){}.getType();
    }
    
    if ("UserOrderResponse".equalsIgnoreCase(className)) {
      return new TypeToken<UserOrderResponse>(){}.getType();
    }
    
    if ("UserOrderSearchResponse".equalsIgnoreCase(className)) {
      return new TypeToken<UserOrderSearchResponse>(){}.getType();
    }
    
    if ("UserResource".equalsIgnoreCase(className)) {
      return new TypeToken<UserResource>(){}.getType();
    }
    
    return new TypeToken<Object>(){}.getType();
  }

};
