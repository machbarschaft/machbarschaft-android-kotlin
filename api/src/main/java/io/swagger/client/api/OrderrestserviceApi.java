/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import io.swagger.client.model.MonoOrderResource;
import java.util.UUID;
import io.swagger.client.model.CreateOrderDto;
import io.swagger.client.model.FluxUserOrderSearchResponse;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class OrderrestserviceApi {
  String basePath = "https://service-api-ng.nightly.staging.colivery.app/";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * abortOrderDelivery
  * 
   * @param orderId orderId
   * @param authenticated 
   * @param authorities0Authority 
   * @param credentials 
   * @param details 
   * @param principal 
   * @return MonoOrderResource
  */
  public MonoOrderResource abortOrderDeliveryUsingPATCH (UUID orderId, Boolean authenticated, String authorities0Authority, Map<String, String> credentials, Map<String, String> details, Map<String, String> principal) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'orderId' is set
      if (orderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling abortOrderDeliveryUsingPATCH",
      new ApiException(400, "Missing the required parameter 'orderId' when calling abortOrderDeliveryUsingPATCH"));
      }
  

  // create path and map variables
  String path = "/v1/order/{orderId}/abort".replaceAll("\\{format\\}","json").replaceAll("\\{" + "orderId" + "\\}", apiInvoker.escapeString(orderId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "authenticated", authenticated));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "authorities[0].authority", authorities0Authority));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "credentials", credentials));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "details", details));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "principal", principal));


      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (MonoOrderResource) ApiInvoker.deserialize(localVarResponse, "", MonoOrderResource.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * abortOrderDelivery
   * 
   * @param orderId orderId   * @param authenticated    * @param authorities0Authority    * @param credentials    * @param details    * @param principal 
  */
  public void abortOrderDeliveryUsingPATCH (UUID orderId, Boolean authenticated, String authorities0Authority, Map<String, String> credentials, Map<String, String> details, Map<String, String> principal, final Response.Listener<MonoOrderResource> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling abortOrderDeliveryUsingPATCH",
         new ApiException(400, "Missing the required parameter 'orderId' when calling abortOrderDeliveryUsingPATCH"));
    }
    

    // create path and map variables
    String path = "/v1/order/{orderId}/abort".replaceAll("\\{format\\}","json").replaceAll("\\{" + "orderId" + "\\}", apiInvoker.escapeString(orderId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "authenticated", authenticated));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "authorities[0].authority", authorities0Authority));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "credentials", credentials));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "details", details));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "principal", principal));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((MonoOrderResource) ApiInvoker.deserialize(localVarResponse,  "", MonoOrderResource.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * acceptOrder
  * 
   * @param orderId orderId
   * @param authenticated 
   * @param authorities0Authority 
   * @param credentials 
   * @param details 
   * @param principal 
   * @return MonoOrderResource
  */
  public MonoOrderResource acceptOrderUsingPATCH (UUID orderId, Boolean authenticated, String authorities0Authority, Map<String, String> credentials, Map<String, String> details, Map<String, String> principal) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'orderId' is set
      if (orderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling acceptOrderUsingPATCH",
      new ApiException(400, "Missing the required parameter 'orderId' when calling acceptOrderUsingPATCH"));
      }
  

  // create path and map variables
  String path = "/v1/order/{orderId}/accept".replaceAll("\\{format\\}","json").replaceAll("\\{" + "orderId" + "\\}", apiInvoker.escapeString(orderId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "authenticated", authenticated));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "authorities[0].authority", authorities0Authority));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "credentials", credentials));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "details", details));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "principal", principal));


      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (MonoOrderResource) ApiInvoker.deserialize(localVarResponse, "", MonoOrderResource.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * acceptOrder
   * 
   * @param orderId orderId   * @param authenticated    * @param authorities0Authority    * @param credentials    * @param details    * @param principal 
  */
  public void acceptOrderUsingPATCH (UUID orderId, Boolean authenticated, String authorities0Authority, Map<String, String> credentials, Map<String, String> details, Map<String, String> principal, final Response.Listener<MonoOrderResource> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling acceptOrderUsingPATCH",
         new ApiException(400, "Missing the required parameter 'orderId' when calling acceptOrderUsingPATCH"));
    }
    

    // create path and map variables
    String path = "/v1/order/{orderId}/accept".replaceAll("\\{format\\}","json").replaceAll("\\{" + "orderId" + "\\}", apiInvoker.escapeString(orderId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "authenticated", authenticated));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "authorities[0].authority", authorities0Authority));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "credentials", credentials));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "details", details));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "principal", principal));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((MonoOrderResource) ApiInvoker.deserialize(localVarResponse,  "", MonoOrderResource.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * cancelOrder
  * 
   * @param orderId orderId
   * @param authenticated 
   * @param authorities0Authority 
   * @param credentials 
   * @param details 
   * @param principal 
   * @return MonoOrderResource
  */
  public MonoOrderResource cancelOrderUsingPATCH (UUID orderId, Boolean authenticated, String authorities0Authority, Map<String, String> credentials, Map<String, String> details, Map<String, String> principal) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'orderId' is set
      if (orderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling cancelOrderUsingPATCH",
      new ApiException(400, "Missing the required parameter 'orderId' when calling cancelOrderUsingPATCH"));
      }
  

  // create path and map variables
  String path = "/v1/order/{orderId}/cancel".replaceAll("\\{format\\}","json").replaceAll("\\{" + "orderId" + "\\}", apiInvoker.escapeString(orderId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "authenticated", authenticated));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "authorities[0].authority", authorities0Authority));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "credentials", credentials));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "details", details));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "principal", principal));


      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (MonoOrderResource) ApiInvoker.deserialize(localVarResponse, "", MonoOrderResource.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * cancelOrder
   * 
   * @param orderId orderId   * @param authenticated    * @param authorities0Authority    * @param credentials    * @param details    * @param principal 
  */
  public void cancelOrderUsingPATCH (UUID orderId, Boolean authenticated, String authorities0Authority, Map<String, String> credentials, Map<String, String> details, Map<String, String> principal, final Response.Listener<MonoOrderResource> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling cancelOrderUsingPATCH",
         new ApiException(400, "Missing the required parameter 'orderId' when calling cancelOrderUsingPATCH"));
    }
    

    // create path and map variables
    String path = "/v1/order/{orderId}/cancel".replaceAll("\\{format\\}","json").replaceAll("\\{" + "orderId" + "\\}", apiInvoker.escapeString(orderId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "authenticated", authenticated));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "authorities[0].authority", authorities0Authority));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "credentials", credentials));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "details", details));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "principal", principal));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((MonoOrderResource) ApiInvoker.deserialize(localVarResponse,  "", MonoOrderResource.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * createOrder
  * 
   * @param order order
   * @param authenticated 
   * @param authorities0Authority 
   * @param credentials 
   * @param details 
   * @param principal 
   * @return MonoOrderResource
  */
  public MonoOrderResource createOrderUsingPOST (CreateOrderDto order, Boolean authenticated, String authorities0Authority, Map<String, String> credentials, Map<String, String> details, Map<String, String> principal) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = order;
  
      // verify the required parameter 'order' is set
      if (order == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'order' when calling createOrderUsingPOST",
      new ApiException(400, "Missing the required parameter 'order' when calling createOrderUsingPOST"));
      }
  

  // create path and map variables
  String path = "/v1/order".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "authenticated", authenticated));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "authorities[0].authority", authorities0Authority));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "credentials", credentials));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "details", details));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "principal", principal));


      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (MonoOrderResource) ApiInvoker.deserialize(localVarResponse, "", MonoOrderResource.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * createOrder
   * 
   * @param order order   * @param authenticated    * @param authorities0Authority    * @param credentials    * @param details    * @param principal 
  */
  public void createOrderUsingPOST (CreateOrderDto order, Boolean authenticated, String authorities0Authority, Map<String, String> credentials, Map<String, String> details, Map<String, String> principal, final Response.Listener<MonoOrderResource> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = order;

  
    // verify the required parameter 'order' is set
    if (order == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'order' when calling createOrderUsingPOST",
         new ApiException(400, "Missing the required parameter 'order' when calling createOrderUsingPOST"));
    }
    

    // create path and map variables
    String path = "/v1/order".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "authenticated", authenticated));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "authorities[0].authority", authorities0Authority));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "credentials", credentials));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "details", details));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "principal", principal));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((MonoOrderResource) ApiInvoker.deserialize(localVarResponse,  "", MonoOrderResource.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * deliverOrder
  * 
   * @param orderId orderId
   * @param authenticated 
   * @param authorities0Authority 
   * @param credentials 
   * @param details 
   * @param principal 
   * @return MonoOrderResource
  */
  public MonoOrderResource deliverOrderUsingPATCH (UUID orderId, Boolean authenticated, String authorities0Authority, Map<String, String> credentials, Map<String, String> details, Map<String, String> principal) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'orderId' is set
      if (orderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling deliverOrderUsingPATCH",
      new ApiException(400, "Missing the required parameter 'orderId' when calling deliverOrderUsingPATCH"));
      }
  

  // create path and map variables
  String path = "/v1/order/{orderId}/deliver".replaceAll("\\{format\\}","json").replaceAll("\\{" + "orderId" + "\\}", apiInvoker.escapeString(orderId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "authenticated", authenticated));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "authorities[0].authority", authorities0Authority));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "credentials", credentials));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "details", details));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "principal", principal));


      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (MonoOrderResource) ApiInvoker.deserialize(localVarResponse, "", MonoOrderResource.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * deliverOrder
   * 
   * @param orderId orderId   * @param authenticated    * @param authorities0Authority    * @param credentials    * @param details    * @param principal 
  */
  public void deliverOrderUsingPATCH (UUID orderId, Boolean authenticated, String authorities0Authority, Map<String, String> credentials, Map<String, String> details, Map<String, String> principal, final Response.Listener<MonoOrderResource> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling deliverOrderUsingPATCH",
         new ApiException(400, "Missing the required parameter 'orderId' when calling deliverOrderUsingPATCH"));
    }
    

    // create path and map variables
    String path = "/v1/order/{orderId}/deliver".replaceAll("\\{format\\}","json").replaceAll("\\{" + "orderId" + "\\}", apiInvoker.escapeString(orderId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "authenticated", authenticated));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "authorities[0].authority", authorities0Authority));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "credentials", credentials));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "details", details));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "principal", principal));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((MonoOrderResource) ApiInvoker.deserialize(localVarResponse,  "", MonoOrderResource.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * searchOrdersInRange
  * 
   * @param latitude latitude
   * @param longitude longitude
   * @param range range
   * @return FluxUserOrderSearchResponse
  */
  public FluxUserOrderSearchResponse searchOrdersInRangeUsingGET (Double latitude, Double longitude, Integer range) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'latitude' is set
      if (latitude == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'latitude' when calling searchOrdersInRangeUsingGET",
      new ApiException(400, "Missing the required parameter 'latitude' when calling searchOrdersInRangeUsingGET"));
      }
  
      // verify the required parameter 'longitude' is set
      if (longitude == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'longitude' when calling searchOrdersInRangeUsingGET",
      new ApiException(400, "Missing the required parameter 'longitude' when calling searchOrdersInRangeUsingGET"));
      }
  
      // verify the required parameter 'range' is set
      if (range == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'range' when calling searchOrdersInRangeUsingGET",
      new ApiException(400, "Missing the required parameter 'range' when calling searchOrdersInRangeUsingGET"));
      }
  

  // create path and map variables
  String path = "/v1/order".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "latitude", latitude));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "longitude", longitude));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "range", range));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (FluxUserOrderSearchResponse) ApiInvoker.deserialize(localVarResponse, "", FluxUserOrderSearchResponse.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * searchOrdersInRange
   * 
   * @param latitude latitude   * @param longitude longitude   * @param range range
  */
  public void searchOrdersInRangeUsingGET (Double latitude, Double longitude, Integer range, final Response.Listener<FluxUserOrderSearchResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'latitude' is set
    if (latitude == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'latitude' when calling searchOrdersInRangeUsingGET",
         new ApiException(400, "Missing the required parameter 'latitude' when calling searchOrdersInRangeUsingGET"));
    }
    
    // verify the required parameter 'longitude' is set
    if (longitude == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'longitude' when calling searchOrdersInRangeUsingGET",
         new ApiException(400, "Missing the required parameter 'longitude' when calling searchOrdersInRangeUsingGET"));
    }
    
    // verify the required parameter 'range' is set
    if (range == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'range' when calling searchOrdersInRangeUsingGET",
         new ApiException(400, "Missing the required parameter 'range' when calling searchOrdersInRangeUsingGET"));
    }
    

    // create path and map variables
    String path = "/v1/order".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "latitude", latitude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "longitude", longitude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "range", range));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((FluxUserOrderSearchResponse) ApiInvoker.deserialize(localVarResponse,  "", FluxUserOrderSearchResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
