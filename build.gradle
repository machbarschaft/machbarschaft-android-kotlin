// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext {
        kotlin_version = "1.3.72"
        androidxAppcompatVersion = "1.1.0"
        androidxCoreVersion = "1.3.0"
        navigationVersion = "2.2.2"
        constraintLayoutVersion = "1.1.3"
        materialDesignVersion = "1.2.0-beta01"

        okHttpLoggingVersion = "3.12.5"
        retrofitVersion = "2.4.0"
        retrofitAdapterVersion = "2.6.2"
        retrofitGsonVersion = "2.6.2"
        rxAndroidVersion = "2.1.1"

        //testing dependency versions
        jUnitVersion = "4.13"
        androidxJUnitVersion = "1.1.1"
        espressoVersion = "3.2.0"

    }

    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath "com.android.tools.build:gradle:4.0.0"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins {
    id "org.openapi.generator" version "4.3.1"
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

ext {
    apiSpecUrl = project.findProperty('apiSpecUrl') ?: "https://service-api-ng.nightly.staging.colivery.app/v2/api-docs"
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task removeApiSrc(type: Delete) {
    delete project(":api").file('src')
    delete project(":api").file('docs')
}

task fixApiGradleWrapper {
    doLast {
        def buildFile = project(":api").file('build.gradle');
        def lines = buildFile.readLines();
        def inWrapperTask = false
        for (int i = 0; i < lines.size(); i++) {
            if (!inWrapperTask && lines.get(i).matches("wrapper \\{")) {
                System.out.println("Found wrapper task")
                inWrapperTask = true
            }

            if (inWrapperTask) {
                def removedLine = lines.remove(i--)
                if (removedLine.matches("}")) {
                    if (lines.get(i).isEmpty()) {
                        lines.remove(i)
                    }
                    break
                }
            }
        }

        buildFile.write(lines.join("\n"))
    }
}

openApiGenerate {
    generatorName = "kotlin"
    library = "jvm-retrofit2"

    inputSpec = "${apiSpecUrl}"
    outputDir = "api"

    apiPackage = "jetzt.machbarschaft.android.api"
    modelPackage = "jetzt.machbarschaft.android.api.model"
    invokerPackage = "jetzt.machbarschaft.android"
    packageName = "jetzt.machbarschaft.android"

    groupId = "jetzt.machbarschaft.android"
    id = "openapi-kotlin-client"
    version = "1.0.0"

    modelNameSuffix = "Model"
    generateModelTests = true
    generateApiTests = true
    generateModelDocumentation = true
    configOptions = [
            dateLibrary            : "java8",
            hideGenerationTimestamp: "true",
            useCoroutines          : "true"
    ]
}

task generateApiClient {
    dependsOn 'removeApiSrc'
    dependsOn 'openApiGenerate'
    dependsOn 'fixApiGradleWrapper'
    tasks.findByName('openApiGenerate').mustRunAfter 'removeApiSrc'
    tasks.findByName('fixApiGradleWrapper').mustRunAfter 'openApiGenerate'
}
